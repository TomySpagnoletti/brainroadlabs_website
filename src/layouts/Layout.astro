---
import '../styles/global.css'
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Geist:wght@100;200;300;400;500;600;700;800;900&family=Geist+Mono:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
		<title>BrainRoad Labs</title>
	</head>
	<body>
		<div class="gradient-bg">
			<svg xmlns="http://www.w3.org/2000/svg">
				<defs>
					<filter id="goo">
						<feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
						<feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8" result="goo" />
						<feBlend in="SourceGraphic" in2="goo" />
					</filter>
					<filter id="paper-texture" x="0%" y="0%" width="100%" height="100%">
						<feTurbulence type="fractalNoise" baseFrequency="0.8" numOctaves="4" result="noise" />
						<feDisplacementMap in="SourceGraphic" in2="noise" scale="3" />
					</filter>
				</defs>
			</svg>
			<div class="gradients-container">
				<div class="g1"></div>
				<div class="g2"></div>
				<div class="g3"></div>
				<div class="g4"></div>
				<div class="g5"></div>
				<div class="interactive"></div>
			</div>
			<div class="noise-overlay"></div>
		</div>
		
		<div class="content-wrapper flex justify-center items-center min-h-screen p-[10px]">
			<slot />
		</div>
	</body>
</html>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const interBubble = document.querySelector('.interactive');
		if (!interBubble) return;
		
		let curX = 0;
		let curY = 0;
		let tgX = 0;
		let tgY = 0;

		function move() {
			curX += (tgX - curX) / 20;
			curY += (tgY - curY) / 20;
			interBubble.style.transform = `translate(${Math.round(curX)}px, ${Math.round(curY)}px)`;
			requestAnimationFrame(() => {
				move();
			});
		}

		window.addEventListener('mousemove', (event) => {
			tgX = event.clientX;
			tgY = event.clientY;
		});

		move();
	});
</script>