@import "tailwindcss";

html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}

/* Explicitly set body text to use Geist Mono, but NOT for headings */
body {
  font-family: 'Geist Mono', monospace;
  font-weight: 300;
  color: rgb(var(--color-text));
  font-size: 13px;
  line-height: 1.35;
}

/* Use Geist (non-mono) for headings with custom color */
h1, h2, h3, h4, h5, h6 {
  font-family: 'Geist', sans-serif;
  font-weight: 600;
  color: rgb(var(--color-heading));
  letter-spacing: -0.03em; /* Slightly tighter letter spacing */
  text-shadow: 0 1px 2px rgba(var(--color-shadow), 0.05);
}

/* Apply font-weight 700 to strong tags using Tailwind's font-bold utility */
strong {
  @apply font-bold;
}

/* Style for links using the custom link color */
a {
  color: rgb(var(--color-link));
  text-decoration: none;
}

/* BrainRoad Badge styles using Tailwind utilities */
.br_badge {
  @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs;
  border: 1px solid rgba(var(--gray-border));
}

/* Badge dot color variants */
.br_badge_green {
  @apply mr-1 h-1.5 w-1.5 rounded-full bg-green-500;
}

/* Dynamic bubble background */
:root {
  /* Gradient Colors */
  --circle-color1: 180, 240, 220;              /* Light mint/aqua */
  --circle-color2: 120, 220, 200;              /* Darker mint green */
  --circle-color3: 255, 180, 230;              /* Light pink */
  --circle-color4: 240, 150, 210;              /* Deeper pink */
  --circle-color5: 180, 180, 255;              /* Lavender blue */
  --circle-color-interactive: 200, 160, 255;   /* Bright purple */
  
  /* Circle Properties */
  --circle-blending: color-dodge;
  --circle-opacity-bg: 0.9;

  /* Brand Colors */
  --color-text: 40, 40, 50;
  --color-link: 139, 139, 183;          /* #8b8bb7 - Purplish blue */
  --color-heading: 40, 40, 50;
  --color-shadow: 0, 0, 0;              /* For rgba shadows */

  /* UI Properties */
  --border-radius: 20px;
  --body-total-padding: 20px;           /* 10px left and 10px right */
  
  /* Container Dimensions */
  --container-landscape: 700px;         /* Max width in landscape mode */
  --container-portrait: 300px;          /* Max width in portrait mode */

  /* Border */
  --gray-border: 80, 80, 95, 0.15;
}

.content-wrapper {
  position: relative;
  z-index: 10;
}

/* Main container for BrainRoad Labs components */
.br_container {
  /* Base styles for all orientations */
  @apply bg-white rounded-[var(--border-radius)] border border-[rgba(var(--gray-border))];
  
  /* Landscape orientation */
  @media (orientation: landscape) {
    max-width: var(--container-landscape);
    max-height: var(--container-portrait);
    width: calc(100vw - var(--body-total-padding));
    height: calc(100vh - var(--body-total-padding));
  }
  
  /* Portrait orientation */
  @media (orientation: portrait) {
    max-height: var(--container-landscape);
    max-width: var(--container-portrait);
    width: calc(100vw - var(--body-total-padding));
    height: calc(100vh - var(--body-total-padding));
  }
}

.gradient-bg {
  width: 100vw;
  height: 100vh;
  position: fixed;
  overflow: hidden;
  top: 0;
  left: 0;
  z-index: -1;
}

.gradient-bg svg {
  position: fixed;
  top: 0;
  left: 0;
  width: 0;
  height: 0;
}

.gradients-container {
  filter: url(#goo) blur(40px);
  width: 100%;
  height: 100%;
  position: relative;
}

.g1 {
  position: absolute;
  background: radial-gradient(circle at center, rgba(var(--circle-color1), var(--circle-opacity-bg)) 0, rgba(var(--circle-color1), 0) 50%) no-repeat;
  mix-blend-mode: var(--circle-blending);
  width: 1600px;
  height: 1600px;
  top: calc(50% - 800px);
  left: calc(50% - 800px);
  transform-origin: center center;
  animation: moveVertical 30s ease infinite;
  opacity: 1;
}

.g2 {
  position: absolute;
  background: radial-gradient(circle at center, rgba(var(--circle-color2), var(--circle-opacity-bg)) 0, rgba(var(--circle-color2), 0) 50%) no-repeat;
  mix-blend-mode: var(--circle-blending);
  width: 1400px;
  height: 1400px;
  top: calc(50% - 700px);
  left: calc(50% - 700px);
  transform-origin: calc(50% - 400px);
  animation: moveInCircle 20s reverse infinite;
  opacity: 1;
}

.g3 {
  position: absolute;
  background: radial-gradient(circle at center, rgba(var(--circle-color3), var(--circle-opacity-bg)) 0, rgba(var(--circle-color3), 0) 50%) no-repeat;
  mix-blend-mode: var(--circle-blending);
  width: 1700px;
  height: 1700px;
  top: calc(50% - 850px + 200px);
  left: calc(50% - 850px - 300px);
  transform-origin: calc(50% + 400px);
  animation: moveInCircle 40s linear infinite;
  opacity: 1;
}

.g4 {
  position: absolute;
  background: radial-gradient(circle at center, rgba(var(--circle-color4), var(--circle-opacity-bg)) 0, rgba(var(--circle-color4), 0) 50%) no-repeat;
  mix-blend-mode: var(--circle-blending);
  width: 1500px;
  height: 1500px;
  top: calc(50% - 750px);
  left: calc(50% - 750px);
  transform-origin: calc(50% - 200px);
  animation: moveHorizontal 40s ease infinite;
  opacity: 0.7;
}

.g5 {
  position: absolute;
  background: radial-gradient(circle at center, rgba(var(--circle-color5), var(--circle-opacity-bg)) 0, rgba(var(--circle-color5), 0) 50%) no-repeat;
  mix-blend-mode: var(--circle-blending);
  width: 2000px;
  height: 2000px;
  top: calc(50% - 1000px);
  left: calc(50% - 1000px);
  transform-origin: calc(50% - 800px) calc(50% + 200px);
  animation: moveInCircle 20s ease infinite;
  opacity: 1;
}

.interactive {
  position: absolute;
  background: radial-gradient(circle at center, rgba(var(--circle-color-interactive), var(--circle-opacity-bg)) 0, rgba(var(--circle-color-interactive), 0) 50%) no-repeat;
  mix-blend-mode: var(--circle-blending);
  width: 600px;
  height: 600px;
  top: 0;
  left: 0;
  margin-top: -300px;
  margin-left: -300px;
  opacity: 0.7;
  pointer-events: none;
}

@keyframes moveInCircle {
  0% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(180deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes moveVertical {
  0% {
    transform: translateY(-50%);
  }
  50% {
    transform: translateY(50%);
  }
  100% {
    transform: translateY(-50%);
  }
}

@keyframes moveHorizontal {
  0% {
    transform: translateX(-50%) translateY(-10%);
  }
  50% {
    transform: translateX(50%) translateY(10%);
  }
  100% {
    transform: translateX(-50%) translateY(-10%);
  }
}